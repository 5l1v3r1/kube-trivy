/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/masahiro331/kube-trivy/pkg/apis/kubetrivy/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VulnerabilityLister helps list Vulnerabilities.
type VulnerabilityLister interface {
	// List lists all Vulnerabilities in the indexer.
	List(selector labels.Selector) (ret []*v1.Vulnerability, err error)
	// Vulnerabilities returns an object that can list and get Vulnerabilities.
	Vulnerabilities(namespace string) VulnerabilityNamespaceLister
	VulnerabilityListerExpansion
}

// vulnerabilityLister implements the VulnerabilityLister interface.
type vulnerabilityLister struct {
	indexer cache.Indexer
}

// NewVulnerabilityLister returns a new VulnerabilityLister.
func NewVulnerabilityLister(indexer cache.Indexer) VulnerabilityLister {
	return &vulnerabilityLister{indexer: indexer}
}

// List lists all Vulnerabilities in the indexer.
func (s *vulnerabilityLister) List(selector labels.Selector) (ret []*v1.Vulnerability, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Vulnerability))
	})
	return ret, err
}

// Vulnerabilities returns an object that can list and get Vulnerabilities.
func (s *vulnerabilityLister) Vulnerabilities(namespace string) VulnerabilityNamespaceLister {
	return vulnerabilityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VulnerabilityNamespaceLister helps list and get Vulnerabilities.
type VulnerabilityNamespaceLister interface {
	// List lists all Vulnerabilities in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Vulnerability, err error)
	// Get retrieves the Vulnerability from the indexer for a given namespace and name.
	Get(name string) (*v1.Vulnerability, error)
	VulnerabilityNamespaceListerExpansion
}

// vulnerabilityNamespaceLister implements the VulnerabilityNamespaceLister
// interface.
type vulnerabilityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Vulnerabilities in the indexer for a given namespace.
func (s vulnerabilityNamespaceLister) List(selector labels.Selector) (ret []*v1.Vulnerability, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Vulnerability))
	})
	return ret, err
}

// Get retrieves the Vulnerability from the indexer for a given namespace and name.
func (s vulnerabilityNamespaceLister) Get(name string) (*v1.Vulnerability, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("vulnerability"), name)
	}
	return obj.(*v1.Vulnerability), nil
}
